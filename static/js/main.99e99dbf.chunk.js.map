{"version":3,"sources":["UserTable.js","sortFilters.js","App.js","helperMethods.js","serviceWorker.js","index.js"],"names":["UserTable","props","columns","Header","title","accessor","width","Cell","row","react_default","a","createElement","className","src","original","photo","height","alt","name","es","data","showPagination","minRows","verticalAlign","sortAlphabetically","users","sort","b","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","fetchUserIds","token","params","axios","get","then","response","result","handleIdList","catch","error","console","log","list","promiseArr","map","id","validateUser","Promise","all","state","setState","age","slice","hasResults","userDetail","number","test","concat","react_body_backgroundcolor_default","backgroundColor","UserTable_UserTable","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99e99dbf.chunk.js","sourcesContent":["import React from 'react';\nimport 'react-table/react-table.css';\nimport ReactTable from 'react-table';\nimport './UserTable.css';\n\n// pre: Takes in an array of Users and a Title (for the table)\n// post: Returns a table that displays User information\nexport function UserTable(props) {\n  const columns = [\n    {\n      Header: props.title || 'Displaying Users',\n      columns: [\n        {\n          Header: 'ID',\n          accessor: 'id',\n          width: 50,\n        },\n        {\n          Header: 'Name',\n          accessor: 'name',\n        },\n        {\n          Header: 'Photo',\n          Cell: row => (\n            <div>\n              <img\n                className=\"img-responsive\"\n                src={row.original.photo}\n                height={34}\n                alt={'photoOf' + row.original.name}\n              />\n            </div>\n          ),\n        },\n        {\n          Header: 'Age',\n          accessor: 'age',\n        },\n        {\n          Header: 'Number',\n          accessor: 'number',\n        },\n      ],\n    },\n  ];\n  return (\n    <div className=\"white\">\n      <ReactTable\n        data={props.data || []}\n        columns={columns}\n        showPagination={false}\n        minRows={0}\n        verticalAlign=\"middle\"\n        className=\"-striped -highlight\"\n      />\n    </div>\n  );\n}\n","// Common sorting methods used to filter a List of User Objects\n\n// pre: Takes an array of Users\n// post: Returns an array of Users sorted in alphabetical order\nexport function sortAlphabetically(users) {\n  return users.sort(function(a, b) {\n    if (a.name < b.name) {\n      return -1;\n    }\n    if (a.name > b.name) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\n// pre: Takes an array of Users\n// post: Returns an array of Users sorted by Age\nexport function sortByAge(users) {\n  return users.sort(function(a, b) {\n    if (a.age < b.age) {\n      return -1;\n    }\n    if (a.age > b.age) {\n      return 1;\n    }\n    if (a.age === b.age) {\n      // Alphabetical Order breaks tie\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n    }\n    return 0;\n  });\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { UserTable } from './UserTable';\nimport BodyBackgroundColor from 'react-body-backgroundcolor';\nimport { isValidPhoneNumber } from './helperMethods';\nimport { sortByAge, sortAlphabetically } from './sortFilters';\n\n// Class that fetches sample data of users from AppSheet's webservice\n// and displays the Top 5 Youngest Users with valid phone numbers, by name\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      hasResults: false,\n    };\n  }\n\n  render() {\n    return (\n      <BodyBackgroundColor backgroundColor=\"#ccffcc\">\n        <div>\n          <h2 className=\"title\">Akash Arora - App Sheet Project</h2>\n          {this.state.hasResults ? (\n            <UserTable\n              data={this.state.users}\n              title=\"The Top Five Youngest Users with Valid Phone Numbers, by Name\"\n            />\n          ) : (\n            <div className=\"button__container\" onClick={this.handleClick}>\n              <button className=\"button\">Get Results</button>\n            </div>\n          )}\n        </div>\n      </BodyBackgroundColor>\n    );\n  }\n\n  // post: calls <fetchUserIds>\n  handleClick = event => {\n    this.fetchUserIds();\n  };\n\n  // pre: Takes in an optional token that can be used to retrieve another list of User ID's\n  // post:  Makes a request to AppSheet's web service using an optional token to retrieve\n  //        (1) a list of User ID's and (2 -- optional) a token.\n  //        Passes the list of User ID's and token to <handleIdList()>\n  //        If token retrieved, function invokes self with token\n  fetchUserIds = token => {\n    const params = token ? { token: token } : {};\n    axios\n      .get('https://appsheettest1.azurewebsites.net/sample/list', {\n        params,\n      })\n      .then(response => {\n        const token = response.data.token ? response.data.token : '';\n        if (token) {\n          this.fetchUserIds(token);\n        }\n        if (response.data && response.data.result) {\n          this.handleIdList(response.data.result, token);\n        }\n      })\n      .catch(error => {\n        console.log('Error: ' + error);\n      });\n  };\n\n  // pre: Takes in a List of User ID's and a token\n  // post: Makes a request to AppSheet's webservice to fetch details on each User.\n  //       Sends each User to <validateUser()>.\n  //       Upon retrieving all users' details in the LAST List of User ID's,\n  //          Sorts and filters Users and stores the Top Five Youngest Users by Name\n  handleIdList = (list, token) => {\n    let promiseArr = list.map(id => {\n      return axios\n        .get('https://appsheettest1.azurewebsites.net/sample/detail/' + id)\n        .then(response => {\n          this.validateUser(response);\n        })\n        .catch(error => {\n          console.log('Error: ' + error);\n        });\n    });\n    Promise.all(promiseArr).then(() => {\n      if (!token) {\n        console.log(this.state.users);\n        this.setState({\n          users: sortAlphabetically(sortByAge(this.state.users).slice(0, 5)),\n          hasResults: true,\n        });\n      }\n    });\n  };\n\n  // pre: Takes in a User object\n  // post: Stores User object if User has data and a valid phone number\n  validateUser = userDetail => {\n    if (userDetail.data && isValidPhoneNumber(userDetail.data.number)) {\n      this.setState({\n        users: this.state.users.concat(userDetail.data),\n      });\n    }\n  };\n}\n\nexport default App;\n","// pre: Takes in a String\n// post: Returns True string is a valid phone number. False otherwise\n//       (http://zparacha.com/phone_number_javascript_regex) explains regex\nexport function isValidPhoneNumber(number) {\n  const phoneNumberPattern = /^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$/;\n  return phoneNumberPattern.test(number);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}